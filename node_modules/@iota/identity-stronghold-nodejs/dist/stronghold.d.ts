import { DID, KeyLocation, Signature, ChainState, Storage, KeyType, Document, EncryptedData, EncryptionAlgorithm, CekAlgorithm } from "@iota/identity-wasm/node";
export declare class Stronghold implements Storage {
    private napiStronghold;
    constructor();
    init(snapshot: string, password: string, dropsave?: boolean): Promise<void>;
    static build(snapshot: string, password: string, dropsave?: boolean): Promise<Stronghold>;
    didCreate(network: string, fragment: string, private_key?: Uint8Array): Promise<[DID, KeyLocation]>;
    didPurge(did: DID): Promise<boolean>;
    didExists(did: DID): Promise<boolean>;
    didList(): Promise<Array<DID>>;
    keyGenerate(did: DID, keyType: KeyType, fragment: string): Promise<KeyLocation>;
    keyInsert(did: DID, keyLocation: KeyLocation, privateKey: Uint8Array): Promise<void>;
    keyExists(did: DID, keyLocation: KeyLocation): Promise<boolean>;
    keyPublic(did: DID, keyLocation: KeyLocation): Promise<Uint8Array>;
    keyDelete(did: DID, keyLocation: KeyLocation): Promise<boolean>;
    keySign(did: DID, keyLocation: KeyLocation, data: Uint8Array): Promise<Signature>;
    dataEncrypt(did: DID, plaintext: Uint8Array, associatedData: Uint8Array, encryptionAlgorithm: EncryptionAlgorithm, cekAlgorithm: CekAlgorithm, publicKey: Uint8Array): Promise<EncryptedData>;
    dataDecrypt(did: DID, data: EncryptedData, encryptionAlgorithm: EncryptionAlgorithm, cekAlgorithm: CekAlgorithm, privateKey: KeyLocation): Promise<Uint8Array>;
    chainStateGet(did: DID): Promise<ChainState | undefined>;
    chainStateSet(did: DID, chainState: ChainState): Promise<void>;
    documentGet(did: DID): Promise<Document | undefined>;
    documentSet(did: DID, document: Document): Promise<void>;
    flushChanges(): Promise<void>;
}
//# sourceMappingURL=stronghold.d.ts.map