/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_methodcontent_free(a: number): void;
export function methodcontent_GenerateEd25519(): number;
export function methodcontent_PrivateEd25519(a: number, b: number): number;
export function methodcontent_PublicEd25519(a: number, b: number): number;
export function methodcontent_GenerateX25519(): number;
export function methodcontent_PrivateX25519(a: number, b: number): number;
export function methodcontent_PublicX25519(a: number, b: number): number;
export function methodcontent_toJSON(a: number, b: number): void;
export function methodcontent_fromJSON(a: number, b: number): void;
export function account_attachMethodRelationships(a: number, b: number, c: number): void;
export function account_createMethod(a: number, b: number, c: number): void;
export function account_detachMethodRelationships(a: number, b: number, c: number): void;
export function __wbg_timestamp_free(a: number): void;
export function timestamp_parse(a: number, b: number, c: number): void;
export function timestamp_nowUTC(): number;
export function timestamp_toRFC3339(a: number, b: number): void;
export function timestamp_checkedAdd(a: number, b: number): number;
export function timestamp_checkedSub(a: number, b: number): number;
export function timestamp_toJSON(a: number, b: number): void;
export function timestamp_fromJSON(a: number, b: number): void;
export function __wbg_duration_free(a: number): void;
export function duration_seconds(a: number): number;
export function duration_minutes(a: number): number;
export function duration_hours(a: number): number;
export function duration_days(a: number): number;
export function duration_weeks(a: number): number;
export function duration_toJSON(a: number, b: number): void;
export function duration_fromJSON(a: number, b: number): void;
export function __wbg_keypair_free(a: number): void;
export function keypair_new(a: number, b: number): void;
export function keypair_fromKeys(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function keypair_tryFromPrivateKeyBytes(a: number, b: number, c: number, d: number): void;
export function keypair_type(a: number): number;
export function keypair_public(a: number, b: number): void;
export function keypair_private(a: number, b: number): void;
export function keypair_toJSON(a: number, b: number): void;
export function keypair_fromJSON(a: number, b: number): void;
export function keypair_clone(a: number): number;
export function __wbg_verifieroptions_free(a: number): void;
export function verifieroptions_new(a: number, b: number): void;
export function verifieroptions_default(): number;
export function verifieroptions_toJSON(a: number, b: number): void;
export function verifieroptions_fromJSON(a: number, b: number): void;
export function verifieroptions_clone(a: number): number;
export function __wbg_chainstate_free(a: number): void;
export function chainstate_toJSON(a: number, b: number): void;
export function chainstate_fromJSON(a: number, b: number): void;
export function __wbg_documenthistory_free(a: number): void;
export function documenthistory_integrationChainData(a: number): number;
export function documenthistory_integrationChainSpam(a: number): number;
export function documenthistory_diffChainData(a: number): number;
export function documenthistory_diffChainSpam(a: number): number;
export function documenthistory_toJSON(a: number, b: number): void;
export function documenthistory_fromJSON(a: number, b: number): void;
export function documenthistory_clone(a: number): number;
export function __wbg_integrationchainhistory_free(a: number): void;
export function __wbg_diffchainhistory_free(a: number): void;
export function integrationchainhistory_chainData(a: number): number;
export function diffchainhistory_chainData(a: number): number;
export function integrationchainhistory_spam(a: number): number;
export function integrationchainhistory_toJSON(a: number, b: number): void;
export function integrationchainhistory_fromJSON(a: number, b: number): void;
export function diffchainhistory_spam(a: number): number;
export function diffchainhistory_toJSON(a: number, b: number): void;
export function diffchainhistory_fromJSON(a: number, b: number): void;
export function __wbg_credentialvalidator_free(a: number): void;
export function credentialvalidator_validate(a: number, b: number, c: number, d: number, e: number): void;
export function credentialvalidator_checkStructure(a: number, b: number): void;
export function credentialvalidator_checkExpiresOnOrAfter(a: number, b: number, c: number): void;
export function credentialvalidator_checkIssuedOnOrBefore(a: number, b: number, c: number): void;
export function credentialvalidator_verifySignature(a: number, b: number, c: number, d: number): void;
export function credentialvalidator_check_subject_holder_relationship(a: number, b: number, c: number, d: number, e: number): void;
export function credentialvalidator_checkStatus(a: number, b: number, c: number, d: number): void;
export function __wbg_methoddata_free(a: number): void;
export function methoddata_newBase58(a: number, b: number): number;
export function methoddata_newMultibase(a: number, b: number): number;
export function methoddata_tryDecode(a: number, b: number): void;
export function methoddata_toJSON(a: number, b: number): void;
export function methoddata_fromJSON(a: number, b: number): void;
export function methoddata_clone(a: number): number;
export function __wbg_account_free(a: number): void;
export function account_did(a: number): number;
export function account_autopublish(a: number): number;
export function account_autosave(a: number): number;
export function account_document(a: number): number;
export function account_resolveIdentity(a: number): number;
export function account_deleteIdentity(a: number): number;
export function account_publish(a: number, b: number): number;
export function account_createSignedCredential(a: number, b: number, c: number, d: number, e: number): number;
export function account_createSignedDocument(a: number, b: number, c: number, d: number, e: number): number;
export function account_createSignedPresentation(a: number, b: number, c: number, d: number, e: number): number;
export function account_createSignedData(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function account_updateDocumentUnchecked(a: number, b: number): number;
export function account_fetchDocument(a: number): number;
export function account_revokeCredentials(a: number, b: number, c: number, d: number): number;
export function account_unrevokeCredentials(a: number, b: number, c: number, d: number): number;
export function account_encryptData(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function account_decryptData(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function __wbg_didurl_free(a: number): void;
export function didurl_parse(a: number, b: number, c: number): void;
export function didurl_did(a: number): number;
export function didurl_urlStr(a: number, b: number): void;
export function didurl_fragment(a: number, b: number): void;
export function didurl_setFragment(a: number, b: number, c: number, d: number): void;
export function didurl_path(a: number, b: number): void;
export function didurl_setPath(a: number, b: number, c: number, d: number): void;
export function didurl_query(a: number, b: number): void;
export function didurl_setQuery(a: number, b: number, c: number, d: number): void;
export function didurl_join(a: number, b: number, c: number, d: number): void;
export function didurl_toString(a: number, b: number): void;
export function didurl_toJSON(a: number, b: number): void;
export function didurl_clone(a: number): number;
export function __wbg_diffmessage_free(a: number): void;
export function diffmessage_id(a: number): number;
export function diffmessage_did(a: number): number;
export function diffmessage_diff(a: number, b: number): void;
export function diffmessage_messageId(a: number, b: number): void;
export function diffmessage_setMessageId(a: number, b: number, c: number, d: number): void;
export function diffmessage_previousMessageId(a: number, b: number): void;
export function diffmessage_setPreviousMessageId(a: number, b: number, c: number, d: number): void;
export function diffmessage_proof(a: number): number;
export function diffmessage_merge(a: number, b: number, c: number): void;
export function diffmessage_toJSON(a: number, b: number): void;
export function diffmessage_fromJSON(a: number, b: number): void;
export function diffmessage_clone(a: number): number;
export function __wbg_resolver_free(a: number): void;
export function resolver_new(a: number): void;
export function resolver_builder(): number;
export function resolver_getClient(a: number, b: number, c: number): number;
export function resolver_resolve(a: number, b: number, c: number): void;
export function resolver_resolveHistory(a: number, b: number, c: number): void;
export function resolver_resolveDiffHistory(a: number, b: number, c: number): void;
export function resolver_resolveCredentialIssuer(a: number, b: number, c: number): void;
export function resolver_resolvePresentationIssuers(a: number, b: number, c: number): void;
export function resolver_resolvePresentationHolder(a: number, b: number, c: number): void;
export function resolver_verifyPresentation(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function __wbg_resolverbuilder_free(a: number): void;
export function resolverbuilder_new(): number;
export function resolverbuilder_client(a: number, b: number): number;
export function resolverbuilder_clientConfig(a: number, b: number, c: number): void;
export function resolverbuilder_build(a: number): number;
export function __wbg_autosave_free(a: number): void;
export function autosave_never(): number;
export function autosave_every(): number;
export function autosave_batch(a: number): number;
export function autosave_toJSON(a: number, b: number): void;
export function autosave_fromJSON(a: number, b: number): void;
export function __wbg_encrypteddata_free(a: number): void;
export function encrypteddata_nonce(a: number, b: number): void;
export function encrypteddata_associatedData(a: number, b: number): void;
export function encrypteddata_ciphertext(a: number, b: number): void;
export function encrypteddata_tag(a: number, b: number): void;
export function encrypteddata_toJSON(a: number, b: number): void;
export function encrypteddata_fromJSON(a: number, b: number): void;
export function __wbg_accountbuilder_free(a: number): void;
export function accountbuilder_new(a: number, b: number): void;
export function accountbuilder_loadIdentity(a: number, b: number, c: number): void;
export function accountbuilder_createIdentity(a: number, b: number, c: number): void;
export function __wbg_did_free(a: number): void;
export function did_new(a: number, b: number, c: number, d: number, e: number): void;
export function did_parse(a: number, b: number, c: number): void;
export function did_network(a: number, b: number): void;
export function did_network_name(a: number, b: number): void;
export function did_tag(a: number, b: number): void;
export function did_join(a: number, b: number, c: number, d: number): void;
export function did_toUrl(a: number): number;
export function did_intoUrl(a: number): number;
export function did_toString(a: number, b: number): void;
export function did_fromJSON(a: number, b: number): void;
export function did_toJSON(a: number): number;
export function did_clone(a: number): number;
export function __wbg_methodtype_free(a: number): void;
export function methodtype_Ed25519VerificationKey2018(): number;
export function methodtype_X25519KeyAgreementKey2019(): number;
export function methodtype_toJSON(a: number, b: number): void;
export function methodtype_fromJSON(a: number, b: number): void;
export function methodtype_toString(a: number, b: number): void;
export function methodtype_clone(a: number): number;
export function account_setAlsoKnownAs(a: number, b: number, c: number): void;
export function __wbg_proofpurpose_free(a: number): void;
export function proofpurpose_assertionMethod(): number;
export function proofpurpose_authentication(): number;
export function proofpurpose_toJSON(a: number, b: number): void;
export function proofpurpose_fromJSON(a: number, b: number): void;
export function proofpurpose_clone(a: number): number;
export function __wbg_documentmetadata_free(a: number): void;
export function documentmetadata_created(a: number): number;
export function documentmetadata_updated(a: number): number;
export function documentmetadata_previous_message_id(a: number, b: number): void;
export function documentmetadata_clone(a: number): number;
export function __wbg_verificationmethod_free(a: number): void;
export function verificationmethod_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function verificationmethod_id(a: number): number;
export function verificationmethod_controller(a: number): number;
export function verificationmethod_SetController(a: number, b: number): void;
export function verificationmethod_type(a: number): number;
export function verificationmethod_data(a: number): number;
export function verificationmethod_toJSON(a: number, b: number): void;
export function verificationmethod_fromJSON(a: number, b: number): void;
export function verificationmethod_clone(a: number): number;
export function __wbg_cekalgorithm_free(a: number): void;
export function cekalgorithm_EcdhEs(a: number): number;
export function cekalgorithm_EcdhEsA256Kw(a: number): number;
export function cekalgorithm_toJSON(a: number, b: number): void;
export function cekalgorithm_fromJSON(a: number, b: number): void;
export function account_deleteMethod(a: number, b: number, c: number): void;
export function account_deleteService(a: number, b: number, c: number): void;
export function account_setController(a: number, b: number, c: number): void;
export function __wbg_ed25519_free(a: number): void;
export function ed25519_PRIVATE_KEY_LENGTH(): number;
export function ed25519_PUBLIC_KEY_LENGTH(): number;
export function ed25519_SIGNATURE_LENGTH(): number;
export function ed25519_sign(a: number, b: number, c: number, d: number, e: number): void;
export function ed25519_verify(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function __wbg_proofoptions_free(a: number): void;
export function proofoptions_new(a: number, b: number): void;
export function proofoptions_default(): number;
export function proofoptions_clone(a: number): number;
export function __wbg_storagetestsuite_free(a: number): void;
export function storagetestsuite_didCreateGenerateKeyTest(a: number): number;
export function storagetestsuite_didCreatePrivateKeyTest(a: number): number;
export function storagetestsuite_didListTest(a: number): number;
export function storagetestsuite_didPurgeTest(a: number): number;
export function storagetestsuite_keyGenerateTest(a: number): number;
export function storagetestsuite_keyDeleteTest(a: number): number;
export function storagetestsuite_keyInsertTest(a: number): number;
export function storagetestsuite_keySignEd25519Test(a: number): number;
export function storagetestsuite_encryptionTest(a: number, b: number): number;
export function __wbg_encryptionalgorithm_free(a: number): void;
export function encryptionalgorithm_A256GCM(): number;
export function encryptionalgorithm_keyLength(a: number): number;
export function encryptionalgorithm_toJSON(a: number, b: number): void;
export function encryptionalgorithm_fromJSON(a: number, b: number): void;
export function __wbg_proof_free(a: number): void;
export function proof_type(a: number, b: number): void;
export function proof_value(a: number, b: number): void;
export function proof_verificationMethod(a: number, b: number): void;
export function proof_created(a: number): number;
export function proof_expires(a: number): number;
export function proof_challenge(a: number, b: number): void;
export function proof_domain(a: number, b: number): void;
export function proof_purpose(a: number): number;
export function proof_toJSON(a: number, b: number): void;
export function proof_fromJSON(a: number, b: number): void;
export function proof_clone(a: number): number;
export function __wbg_x25519_free(a: number): void;
export function x25519_PRIVATE_KEY_LENGTH(): number;
export function x25519_PUBLIC_KEY_LENGTH(): number;
export function x25519_keyExchange(a: number, b: number, c: number, d: number, e: number): void;
export function x25519_Ed25519toX25519Private(a: number, b: number, c: number): void;
export function x25519_Ed25519toX25519Public(a: number, b: number, c: number): void;
export function __wbg_document_free(a: number): void;
export function document_new(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function document_fromVerificationMethod(a: number, b: number): void;
export function document_isSigningMethodType(a: number): number;
export function document_id(a: number): number;
export function document_setController(a: number, b: number, c: number): void;
export function document_controller(a: number): number;
export function document_setAlsoKnownAs(a: number, b: number, c: number): void;
export function document_alsoKnownAs(a: number): number;
export function document_setPropertyUnchecked(a: number, b: number, c: number, d: number, e: number): void;
export function document_properties(a: number, b: number): void;
export function document_service(a: number): number;
export function document_insertService(a: number, b: number): number;
export function document_removeService(a: number, b: number): number;
export function document_methods(a: number): number;
export function document_insertMethod(a: number, b: number, c: number, d: number): void;
export function document_removeMethod(a: number, b: number, c: number): void;
export function document_defaultSigningMethod(a: number, b: number): void;
export function document_resolveMethod(a: number, b: number, c: number, d: number): void;
export function document_resolveSigningMethod(a: number, b: number, c: number): void;
export function document_attachMethodRelationship(a: number, b: number, c: number, d: number): void;
export function document_detachMethodRelationship(a: number, b: number, c: number, d: number): void;
export function document_signSelf(a: number, b: number, c: number, d: number): void;
export function document_signDocument(a: number, b: number, c: number, d: number, e: number): void;
export function document_signCredential(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function document_signPresentation(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function document_signData(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function document_verifyData(a: number, b: number, c: number, d: number): void;
export function document_verifyDocument(a: number, b: number, c: number): void;
export function document_verifyRootDocument(a: number, b: number): void;
export function document_diff(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function document_verifyDiff(a: number, b: number, c: number): void;
export function document_mergeDiff(a: number, b: number, c: number): void;
export function document_integrationIndex(a: number, b: number): void;
export function document_diffIndex(a: number, b: number, c: number): void;
export function document_metadata(a: number): number;
export function document_metadataCreated(a: number): number;
export function document_setMetadataCreated(a: number, b: number, c: number): void;
export function document_metadataUpdated(a: number): number;
export function document_setMetadataUpdated(a: number, b: number, c: number): void;
export function document_metadataPreviousMessageId(a: number, b: number): void;
export function document_setMetadataPreviousMessageId(a: number, b: number, c: number, d: number): void;
export function document_proof(a: number): number;
export function document_revokeCredentials(a: number, b: number, c: number, d: number, e: number): void;
export function document_unrevokeCredentials(a: number, b: number, c: number, d: number, e: number): void;
export function document_toJSON(a: number, b: number): void;
export function document_fromJSON(a: number, b: number): void;
export function document_clone(a: number): number;
export function __wbg_methodscope_free(a: number): void;
export function methodscope_VerificationMethod(): number;
export function methodscope_Authentication(): number;
export function methodscope_AssertionMethod(): number;
export function methodscope_KeyAgreement(): number;
export function methodscope_CapabilityDelegation(): number;
export function methodscope_CapabilityInvocation(): number;
export function methodscope_toString(a: number, b: number): void;
export function methodscope_toJSON(a: number, b: number): void;
export function methodscope_fromJSON(a: number, b: number): void;
export function methodscope_clone(a: number): number;
export function __wbg_credential_free(a: number): void;
export function credential_BaseContext(a: number): void;
export function credential_BaseType(a: number): void;
export function credential_new(a: number, b: number): void;
export function credential_context(a: number, b: number): void;
export function credential_id(a: number, b: number): void;
export function credential_type(a: number): number;
export function credential_credentialSubject(a: number, b: number): void;
export function credential_issuer(a: number, b: number): void;
export function credential_issuanceDate(a: number): number;
export function credential_expirationDate(a: number): number;
export function credential_credentialStatus(a: number, b: number): void;
export function credential_credentialSchema(a: number, b: number): void;
export function credential_refreshService(a: number, b: number): void;
export function credential_termsOfUse(a: number, b: number): void;
export function credential_evidence(a: number, b: number): void;
export function credential_nonTransferable(a: number): number;
export function credential_proof(a: number): number;
export function credential_properties(a: number, b: number): void;
export function credential_toJSON(a: number, b: number): void;
export function credential_fromJSON(a: number, b: number): void;
export function credential_clone(a: number): number;
export function __wbg_resolveddocument_free(a: number): void;
export function resolveddocument_mergeDiffMessage(a: number, b: number, c: number): void;
export function resolveddocument_document(a: number): number;
export function resolveddocument_intoDocument(a: number): number;
export function resolveddocument_diffMessageId(a: number, b: number): void;
export function resolveddocument_setDiffMessageId(a: number, b: number, c: number, d: number): void;
export function resolveddocument_integrationMessageId(a: number, b: number): void;
export function resolveddocument_setIntegrationMessageId(a: number, b: number, c: number, d: number): void;
export function resolveddocument_toJSON(a: number, b: number): void;
export function resolveddocument_fromJSON(a: number, b: number): void;
export function resolveddocument_clone(a: number): number;
export function __wbg_client_free(a: number): void;
export function client_new(a: number): void;
export function client_fromConfig(a: number, b: number): void;
export function client_network(a: number): number;
export function client_publishDocument(a: number, b: number, c: number): void;
export function client_publishDiff(a: number, b: number, c: number, d: number, e: number): void;
export function client_publishJSON(a: number, b: number, c: number, d: number, e: number): void;
export function client_publishJsonWithRetry(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function client_isMessageIncluded(a: number, b: number, c: number, d: number): void;
export function client_resolve(a: number, b: number, c: number): void;
export function client_resolveHistory(a: number, b: number, c: number): void;
export function client_resolveDiffHistory(a: number, b: number, c: number): void;
export function __wbg_signature_free(a: number): void;
export function signature_new(a: number, b: number): number;
export function signature_asBytes(a: number, b: number): void;
export function signature_toJSON(a: number, b: number): void;
export function signature_fromJSON(a: number, b: number): void;
export function __wbg_credentialvalidationoptions_free(a: number): void;
export function credentialvalidationoptions_new(a: number, b: number): void;
export function credentialvalidationoptions_default(): number;
export function credentialvalidationoptions_toJSON(a: number, b: number): void;
export function credentialvalidationoptions_fromJSON(a: number, b: number): void;
export function credentialvalidationoptions_clone(a: number): number;
export function __wbg_presentationvalidationoptions_free(a: number): void;
export function presentationvalidationoptions_new(a: number, b: number): void;
export function presentationvalidationoptions_default(): number;
export function presentationvalidationoptions_toJSON(a: number, b: number): void;
export function presentationvalidationoptions_fromJSON(a: number, b: number): void;
export function presentationvalidationoptions_clone(a: number): number;
export function __wbg_service_free(a: number): void;
export function service_new(a: number, b: number): void;
export function service_id(a: number): number;
export function service_type(a: number, b: number): void;
export function service_serviceEndpoint(a: number): number;
export function service_properties(a: number, b: number): void;
export function service_toJSON(a: number, b: number): void;
export function service_fromJSON(a: number, b: number): void;
export function service_clone(a: number): number;
export function __wbg_revocationbitmap_free(a: number): void;
export function revocationbitmap_new(): number;
export function revocationbitmap_type(a: number): void;
export function revocationbitmap_isRevoked(a: number, b: number): number;
export function revocationbitmap_revoke(a: number, b: number): number;
export function revocationbitmap_unrevoke(a: number, b: number): number;
export function revocationbitmap_len(a: number, b: number): void;
export function revocationbitmap_toEndpoint(a: number, b: number): void;
export function revocationbitmap_fromEndpoint(a: number, b: number): void;
export function __wbg_receipt_free(a: number): void;
export function receipt_network(a: number): number;
export function receipt_messageId(a: number, b: number): void;
export function receipt_networkId(a: number, b: number): void;
export function receipt_nonce(a: number, b: number): void;
export function receipt_toJSON(a: number, b: number): void;
export function receipt_fromJSON(a: number, b: number): void;
export function receipt_clone(a: number): number;
export function __wbg_keylocation_free(a: number): void;
export function keylocation_new(a: number, b: number, c: number, d: number, e: number): number;
export function keylocation_fromVerificationMethod(a: number, b: number): void;
export function keylocation_canonical(a: number, b: number): void;
export function keylocation_keyType(a: number): number;
export function keylocation_toJSON(a: number, b: number): void;
export function keylocation_fromJSON(a: number, b: number): void;
export function keylocation_toString(a: number, b: number): void;
export function account_createService(a: number, b: number, c: number): void;
export function __wbg_presentationvalidator_free(a: number): void;
export function presentationvalidator_validate(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function presentationvalidator_verifyPresentationSignature(a: number, b: number, c: number, d: number): void;
export function presentationvalidator_checkStructure(a: number, b: number): void;
export function __wbg_agreementinfo_free(a: number): void;
export function agreementinfo_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): number;
export function agreementinfo_apu(a: number, b: number): void;
export function agreementinfo_apv(a: number, b: number): void;
export function agreementinfo_pubInfo(a: number, b: number): void;
export function agreementinfo_privInfo(a: number, b: number): void;
export function agreementinfo_toJSON(a: number, b: number): void;
export function agreementinfo_fromJSON(a: number, b: number): void;
export function __wbg_presentation_free(a: number): void;
export function presentation_BaseContext(a: number): void;
export function presentation_BaseType(a: number): void;
export function presentation_new(a: number, b: number): void;
export function presentation_context(a: number, b: number): void;
export function presentation_id(a: number, b: number): void;
export function presentation_type(a: number): number;
export function presentation_verifiableCredential(a: number): number;
export function presentation_holder(a: number, b: number): void;
export function presentation_refreshService(a: number, b: number): void;
export function presentation_termsOfUse(a: number, b: number): void;
export function presentation_proof(a: number): number;
export function presentation_properties(a: number, b: number): void;
export function presentation_toJSON(a: number, b: number): void;
export function presentation_fromJSON(a: number, b: number): void;
export function presentation_clone(a: number): number;
export function __wbg_explorerurl_free(a: number): void;
export function explorerurl_parse(a: number, b: number, c: number): void;
export function explorerurl_mainnet(): number;
export function explorerurl_devnet(): number;
export function explorerurl_messageUrl(a: number, b: number, c: number, d: number): void;
export function explorerurl_resolverUrl(a: number, b: number, c: number): void;
export function explorerurl_toString(a: number, b: number): void;
export function __wbg_network_free(a: number): void;
export function network_tryFromName(a: number, b: number, c: number): void;
export function network_mainnet(): number;
export function network_devnet(): number;
export function network_name(a: number, b: number): void;
export function network_defaultNodeURL(a: number, b: number): void;
export function network_toString(a: number, b: number): void;
export function network_toJSON(a: number, b: number): void;
export function network_fromJSON(a: number, b: number): void;
export function network_clone(a: number): number;
export function start(): void;
export function BrotliDecoderCreateInstance(a: number, b: number, c: number): number;
export function BrotliDecoderSetParameter(a: number, b: number, c: number): void;
export function BrotliDecoderDecompressPrealloc(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number): void;
export function BrotliDecoderDecompressWithReturnInfo(a: number, b: number, c: number, d: number, e: number): void;
export function BrotliDecoderDecompress(a: number, b: number, c: number, d: number): number;
export function BrotliDecoderDecompressStream(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function BrotliDecoderDecompressStreaming(a: number, b: number, c: number, d: number, e: number): number;
export function BrotliDecoderMallocU8(a: number, b: number): number;
export function BrotliDecoderFreeU8(a: number, b: number, c: number): void;
export function BrotliDecoderMallocUsize(a: number, b: number): number;
export function BrotliDecoderFreeUsize(a: number, b: number, c: number): void;
export function BrotliDecoderDestroyInstance(a: number): void;
export function BrotliDecoderHasMoreOutput(a: number): number;
export function BrotliDecoderTakeOutput(a: number, b: number): number;
export function BrotliDecoderIsUsed(a: number): number;
export function BrotliDecoderIsFinished(a: number): number;
export function BrotliDecoderGetErrorCode(a: number): number;
export function BrotliDecoderGetErrorString(a: number): number;
export function BrotliDecoderErrorString(a: number): number;
export function BrotliDecoderVersion(): number;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hdcd0b8367bd8bfe2(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h4fe003293c171f86(a: number, b: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__hd12e749677640a32(a: number, b: number, c: number, d: number): void;
export function __wbindgen_start(): void;
