/// <reference types="node" />
import { PathLike } from "fs";
import { IStorageDriver } from "../../storage-driver.interface";
import { Account, Credential } from "@iota/identity-wasm/node";
import { FsOptions } from "./fs-driver.types";
import { DecryptMethod, EncryptMethod, IStoredVc } from "../storage-driver.types";
export declare class FsStorageDriver implements IStorageDriver<Credential, IStoredVc> {
    filepath: PathLike;
    encryptData: EncryptMethod;
    decryptData: DecryptMethod;
    account: Account;
    private constructor();
    /**
     * Instantiate a new instance of FsStorageDriver
     *
     * @param {IFsDriverProps} options - options object for FsStorageDriver
     * @returns {Promise<FsStorageDriver>}
     */
    static newInstance(options: FsOptions, encryptMethod: EncryptMethod, decryptMethod: DecryptMethod, account: Account): Promise<FsStorageDriver>;
    /**
     * Creates a file if it doesn't exist
     *
     * @returns {Promise<void>}
     */
    private static instantiateFile;
    /**
     * Get the file contents of the file stored at the configured storage path
     *
     * @returns {Promise<Credential[]>}
     */
    private getFileContents;
    /**
     * Write the contents passed to the file configured at storage path
     *
     * @param {Credential[]} data - data to write to the file
     * @returns {Promise<void>}
     */
    private writeFileContents;
    /**
     * Get all of the credentials stored
     *
     * @returns {Promise<Credential[]>}
     */
    findAll(): Promise<Credential[]>;
    /**
     * Find a Credential by it's ID
     *
     * @param {String} id
     * @returns {Promise<Credential[]>}
     */
    findById(id: string): Promise<Credential>;
    /**
     * Filter all creds with a specific credential type
     *
     * @param {String} credType - type of the credential to look for
     * @returns {Promise<Credential[]>}
     */
    findByCredentialType(credType: string): Promise<Credential[]>;
    /**
     * Filter all creds issued by a specific issuer
     *
     * @param {String} issuer
     * @returns {Promise<Credential[]>}
     */
    findByIssuer(issuer: string): Promise<Credential[]>;
    /**
     * Save a new credential to the driver
     *
     * @param {Credential} cred - credential to add to FS
     * @returns {Promise<void>}
     */
    newCredential(cred: Credential): Promise<IStoredVc>;
    /**
     * Delete a credential by ID
     *
     * @param {String} id - id of the credential to delete
     * @returns {Promise<void>}
     */
    delete(id: string): Promise<void>;
    /**
     * Cleanup
     */
    cleanup(): Promise<void>;
}
