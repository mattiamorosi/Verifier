"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyCredential = exports.isCredentialValid = void 0;
const node_1 = require("@iota/identity-wasm/node");
const promises_1 = require("dns/promises");
const client_config_1 = require("../client-config");
/**
 * Validate a credential
 *
 * @param {Credential} signedVc - signed VC that needs to be validated
 * @param {ResolvedDocument} issuerIdentity - account it was signed with
 * @returns {Promise<boolean>}
 */
function isCredentialValid(signedVc, issuerIdentity) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            node_1.CredentialValidator.validate(signedVc, issuerIdentity, node_1.CredentialValidationOptions.default(), node_1.FailFast.AllErrors);
        }
        catch (error) {
            return false;
        }
        return true;
    });
}
exports.isCredentialValid = isCredentialValid;
/**
 * DVID v0.2.0
 * Domain Verifiable Identity is a module that allows you to verify the source of
 * origin for a verifiable credential, here are the steps to validate with DVID v0.2.0
 *
 * - Parse the Document and look for the domain of origin
 * - Lookup TXT records for the domain of origin
 * - Resolve DID contained in DNS record and validate the credential
 *
 * @param {Credential} signedVc
 * @returns {{ vc: boolean, dvid: boolean}}
 */
function verifyCredential(signedVc) {
    return __awaiter(this, void 0, void 0, function* () {
        const resolver = yield node_1.Resolver.builder().clientConfig(client_config_1.clientConfig).build();
        const domain = signedVc
            .toJSON()
            .id.split(/(https|http):\/\//)[2]
            .split("/")[0];
        const txtRecords = yield (0, promises_1.resolveTxt)(domain);
        const didRecord = txtRecords.find((record) => record[0].includes("DVID.did="));
        if (!didRecord)
            throw new Error("DVID Record not found");
        const didTag = didRecord[0].split("DVID.did=")[1];
        const resolvedDocument = yield resolver.resolve(didTag);
        if (!resolvedDocument) {
            const resolvedIdentity = yield resolver.resolve(signedVc.issuer());
            return {
                dvid: false,
                vc: yield isCredentialValid(signedVc, resolvedIdentity),
            };
        }
        const vcIntegrity = yield isCredentialValid(signedVc, resolvedDocument);
        return {
            dvid: true,
            vc: vcIntegrity,
        };
    });
}
exports.verifyCredential = verifyCredential;
//# sourceMappingURL=vc-verification.js.map