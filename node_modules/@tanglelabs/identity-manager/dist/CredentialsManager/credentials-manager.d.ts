import { Account, Credential, EncryptedData, ResolvedDocument } from "@iota/identity-wasm/node";
import { Fragment } from "../identity-manager.types";
import { StorageDriver } from "../StorageDriver/drivers/storage-driver.types";
import { ICreateCredentialProps, ICredentialManagerProps } from "./credentials-manager.types";
/**
 * Credentials Manager is a helper class which contains all the abstractions for creating
 * new credentials, DVID and revokation of credentials
 */
export declare class CredentialsManager {
    fragment: Fragment;
    account: Account;
    revocationEndpoint: Fragment;
    store: StorageDriver;
    private constructor();
    static build(props: ICredentialManagerProps): Promise<CredentialsManager>;
    private buildStore;
    /**
     * Validate a credential
     *
     * @param {Credential} signedVc - signed VC that needs to be validated
     * @param {ResolvedDocument} issuerIdentity - account it was signed with
     * @returns {Promise<boolean>}
     */
    isCredentialValid(signedVc: Credential, issuerIdentity: ResolvedDocument): Promise<boolean>;
    /**
     * DVID v0.2.0
     * Domain Verifiable Identity is a module that allows you to verify the source of
     * origin for a verifiable credential, here are the steps to validate with DVID v0.2.0
     *
     * - Parse the Document and look for the domain of origin
     * - Lookup TXT records for the domain of origin
     * - Resolve DID contained in DNS record and validate the credential
     *
     * @param {Credential} signedVc
     * @returns {{ vc: boolean, dvid: boolean}}
     */
    verifyCredential(signedVc: Credential): Promise<{
        vc: boolean;
        dvid: boolean;
    }>;
    /**
     * Create and issue a verifiable credential for someone
     *
     * @param {ICreateCredentialProps} props
     * @returns {Promise<Credential>}
     */
    create(props: ICreateCredentialProps): Promise<Credential>;
    /**
     * Revoke a credential that has been issued, by revoking the method that was used to
     * sign the credential we are looking to revoke and make invalid.
     *
     * WARNING: it will revoke the method that was attached to the credential thus any other
     * credentials signed using this keypair will also become invalid
     *
     * @param {Number} keyIndex - Revoke the key at the index passed
     * @return {Promise<void>}
     */
    revokeCredential(keyIndex: number): Promise<void>;
    /**
     * Encrypt data and return it
     *
     * @param {String} plainText - data to be encrypted
     * @returns {Promise<EncryptedData>}
     */
    encryptData(plainText: string, account?: Account): Promise<EncryptedData>;
    /**
     * Decrypt the data
     *
     * @param {EncryptedData | JSON | Record<string, unknown>} encryptedData - data to decrypt
     * @returns {Promise<string>}
     */
    decryptData(encryptedData: EncryptedData | JSON | Record<string, unknown>): Promise<string>;
}
