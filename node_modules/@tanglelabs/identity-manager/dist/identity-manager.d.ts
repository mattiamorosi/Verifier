import { AccountBuilder, DID } from "@iota/identity-wasm/node";
import { IdentityAccount } from "./IdentityAccount/identity-account";
import { ICreateDidProps, IManagerBackup, IIdentityManagerProps } from "./identity-manager.types";
/**
 * IdentityManager is a utility class which handles management of secrets and
 * DID documents stored inside of one stronghold backup, private constructor needs
 * a path and password
 */
export declare class IdentityManager {
    builder: AccountBuilder;
    filepath: string;
    password: string;
    managerAlias: string;
    /**
     * Constructor to create an instance of the class
     *
     * @param {String} filepath
     * @param {String} password
     */
    private constructor();
    /**
     * Get the instance of IdentityManager, it will create a new instance of the class
     * shall one not already exist
     *
     * @param {IIdentityManagerProps} props
     * @returns {Promise<IdentityManager>}
     */
    static newInstance(props: IIdentityManagerProps): Promise<IdentityManager>;
    /**
     * Get the IdentityConfig document stored on a JSON
     *
     * @returns {Promise<IdentityConfig[]>}
     */
    private getIdentityConfig;
    /**
     * Get config of a did by the did tag
     *
     * @param {DID} did - tag of the did to fetch
     * @returns {Promise<IdentityConfig>}
     */
    private getIdentityConfigByDid;
    /**
     * Get config of a did by the did alias
     *
     * @param {DID} did - tag of the did to fetch
     * @returns {Promise<IdentityConfig>}
     */
    private getIdentityConfigByAlias;
    /**
     * Load a DID stored in the same stronghold path as the one configured
     *
     * @param {DID} did
     * @returns {Promise<IdentityAccount>}
     */
    getDid(did: DID): Promise<IdentityAccount>;
    /**
     * Create a new DID in the stronghold path as the one configured
     *
     * @param {IIdentityManagerProps} props - Alias for the identity
     * @returns {Promise<IdentityAccount>}
     */
    createDid(props: ICreateDidProps): Promise<IdentityAccount>;
    /**
     * Gets an account by the alias stored in the config
     *
     * @param alias
     * @returns {Promise<IdentityAccount>}
     */
    getIdentityByAlias(alias: string): Promise<IdentityAccount>;
    /**
     * Create a backup of the identity manager with all of the identities stored
     * in the same vault
     *
     * @param {string} password - password to stronghold
     * @returns {Promise<IManagerBackup>}
     */
    createBackup(password: string): Promise<IManagerBackup>;
    /**
     * Take a `IManagerBackup` and then use it to restore identity manager to a
     * version and restore all the identities
     */
    static restoreFromBackup(backup: IManagerBackup, password: string, filepath: string, managerAlias: string): Promise<IdentityManager>;
}
