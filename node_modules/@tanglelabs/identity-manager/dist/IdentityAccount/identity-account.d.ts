import { IIdentityAccountProps } from "./identity-account-props.interface";
import { CredentialsManager } from "../CredentialsManager/credentials-manager";
import { Account, DID, Document } from "@iota/identity-wasm/node";
import { Fragment } from "../identity-manager.types";
/**
 * Utitlity class to bind wrapper methods to an Identity Instance
 */
export declare class IdentityAccount {
    account: Account;
    credentials: CredentialsManager;
    static build(props: IIdentityAccountProps): Promise<IdentityAccount>;
    /**
     * Get the DID associated to the account
     *
     * @returns {DID}
     */
    getDid(): DID;
    /**
     * Get the Document associated to the Account
     */
    getDocument(): Document;
    /**
     * Manipulate a DID and attach a verification method to it
     *
     * @param {Fragment} fragment
     * @returns {Promise<void>}
     */
    attachSigningMethod(fragment: Fragment): Promise<void>;
    /**
     * Manipulate the DID and attach an encryption method to it
     *
     * @param {Fragment} fragment - fragment for the encryption method
     * @returns {Promise<void>}
     */
    attachEncryptionMethod(): Promise<void>;
}
