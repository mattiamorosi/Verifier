"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentityAccount = void 0;
const credentials_manager_1 = require("../CredentialsManager/credentials-manager");
const node_1 = require("@iota/identity-wasm/node");
const fragment_constants_1 = require("../constants/fragment.constants");
/**
 * Utitlity class to bind wrapper methods to an Identity Instance
 */
class IdentityAccount {
    static build(props) {
        return __awaiter(this, void 0, void 0, function* () {
            const identityAccount = new IdentityAccount();
            identityAccount.credentials = yield credentials_manager_1.CredentialsManager.build({
                account: props.account,
                store: props.store,
            });
            identityAccount.account = props.account;
            return identityAccount;
        });
    }
    /**
     * Get the DID associated to the account
     *
     * @returns {DID}
     */
    getDid() {
        return this.account.did();
    }
    /**
     * Get the Document associated to the Account
     */
    getDocument() {
        return this.account.document();
    }
    /**
     * Manipulate a DID and attach a verification method to it
     *
     * @param {Fragment} fragment
     * @returns {Promise<void>}
     */
    attachSigningMethod(fragment) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.account.createMethod({
                content: node_1.MethodContent.GenerateEd25519(),
                fragment,
            });
            const revocationBitmap = new node_1.RevocationBitmap();
            yield this.account.createService({
                fragment: fragment_constants_1.RevocationFragment,
                type: node_1.RevocationBitmap.type(),
                endpoint: revocationBitmap.toEndpoint(),
            });
            yield this.account.publish();
        });
    }
    /**
     * Manipulate the DID and attach an encryption method to it
     *
     * @param {Fragment} fragment - fragment for the encryption method
     * @returns {Promise<void>}
     */
    attachEncryptionMethod() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.account.createMethod({
                fragment: fragment_constants_1.EncryptionFragment,
                scope: node_1.MethodScope.KeyAgreement(),
                content: node_1.MethodContent.GenerateX25519(),
            });
            yield this.account.publish();
        });
    }
}
exports.IdentityAccount = IdentityAccount;
//# sourceMappingURL=identity-account.js.map